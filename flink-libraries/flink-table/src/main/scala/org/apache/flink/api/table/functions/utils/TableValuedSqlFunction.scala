/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.flink.api.table.functions.utils

import java.util

import com.google.common.base.Predicate
import org.apache.calcite.rel.`type`.RelDataType
import org.apache.calcite.schema.{FunctionParameter, TableFunction}
import org.apache.calcite.sql.SqlIdentifier
import org.apache.calcite.sql.`type`._
import org.apache.calcite.sql.parser.SqlParserPos
import org.apache.calcite.sql.validate.SqlUserDefinedTableFunction
import org.apache.calcite.util.Util
import org.apache.flink.api.common.typeinfo.TypeInformation
import org.apache.flink.api.table.FlinkTypeFactory
import org.apache.flink.api.table.functions.TableValuedFunction
import scala.collection.JavaConversions._
import java.util
/**
  * Calcite wrapper for user-defined table functions.
  */
class TableValuedSqlFunction(
                              name: String,
                              udtvf: TableValuedFunction[_],
                              rowTypeInfo: TypeInformation[_],
                              returnTypeInference: SqlReturnTypeInference,
                              operandTypeInference: SqlOperandTypeInference,
                              operandTypeChecker: SqlOperandTypeChecker,
                              paramTypes: util.List[RelDataType],
                              function: TableFunction)
  extends SqlUserDefinedTableFunction(
    new SqlIdentifier(name, SqlParserPos.ZERO),
    returnTypeInference,
    operandTypeInference,
    operandTypeChecker,
    paramTypes,
    function) {

  def getTableFunction = udtvf

  def getRowTypeInfo = rowTypeInfo

}

object TableValuedSqlFunction {
  /**
    *
    * @param name function name (used by SQL parser)
    * @param udtvf user defined table valued function to be called
    * @param rowTypeInfo the row type information generated by the table function
    * @param typeFactory type factory for converting Flink's between Calcite's types
    * @param function calcite table function schema
    * @return
    */
  def apply(
             name: String,
             udtvf: TableValuedFunction[_],
             rowTypeInfo: TypeInformation[_],
             typeFactory: FlinkTypeFactory,
             function: TableFunction): TableValuedSqlFunction = {

    val argTypes: util.List[RelDataType] = new util.ArrayList[RelDataType]
    val typeFamilies: util.List[SqlTypeFamily] = new util.ArrayList[SqlTypeFamily]
    for (functionParameter <- function.getParameters) {
      val relType: RelDataType = functionParameter.getType(typeFactory)
      argTypes.add(relType)
      typeFamilies.add(Util.first(relType.getSqlTypeName.getFamily, SqlTypeFamily.ANY))
    }
    val optional: Predicate[Integer] = new Predicate[Integer]() {
      def apply(input: Integer): Boolean = {
        function.getParameters.get(input).isOptional
      }
    }
    val typeChecker: FamilyOperandTypeChecker = OperandTypes.family(typeFamilies, optional)

    new TableValuedSqlFunction(name, udtvf, rowTypeInfo, ReturnTypes.CURSOR,
      InferTypes.explicit(argTypes), typeChecker, argTypes, function)
  }
}
